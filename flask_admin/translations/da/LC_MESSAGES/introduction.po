# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2024, Flask-Admin Team
# This file is distributed under the same license as the flask-admin
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: flask-admin 2.0.0a0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-22 16:17+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: da\n"
"Language-Team: da <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../doc/introduction.rst:4
msgid "Introduction To Flask-Admin"
msgstr ""

#: ../../doc/introduction.rst:7
msgid "Getting Started"
msgstr ""

#: ../../doc/introduction.rst:10
msgid "Installing Flask-Admin"
msgstr ""

#: ../../doc/introduction.rst:12
msgid ""
"Flask-Admin provides an easy-to-use layer on top of a number of databases"
" and file stores. Whether you use SQLAlchemy, peewee, AWS S3, or "
"something else that Flask-Admin supports, we don't install those things "
"out-of-the-box. This reduces the risk of compatibility issues and means "
"that you don't download/install anything you don't need."
msgstr ""

#: ../../doc/introduction.rst:17
msgid ""
"Depending on what you use, you should install Flask-Admin with your "
"required extras selected."
msgstr ""

#: ../../doc/introduction.rst:19
msgid "Flask-Admin has these optional extras you can select:"
msgstr ""

#: ../../doc/introduction.rst:22
msgid "Extra name"
msgstr ""

#: ../../doc/introduction.rst:22
msgid "What functionality does this add to Flask-Admin?"
msgstr ""

#: ../../doc/introduction.rst:24
msgid "sqlalchemy"
msgstr ""

#: ../../doc/introduction.rst:24
msgid "SQLAlchemy, for accessing many database engines"
msgstr ""

#: ../../doc/introduction.rst:25
msgid "sqlalchemy-with-utils"
msgstr ""

#: ../../doc/introduction.rst:25
msgid "As above, with some additional utilities for different data types"
msgstr ""

#: ../../doc/introduction.rst:26
msgid "geoalchemy"
msgstr ""

#: ../../doc/introduction.rst:26
msgid "As with SQLAlchemy, but adding support for geographic data and maps"
msgstr ""

#: ../../doc/introduction.rst:27
msgid "pymongo"
msgstr ""

#: ../../doc/introduction.rst:27
msgid "Supports the PyMongo library"
msgstr ""

#: ../../doc/introduction.rst:28
msgid "peewee"
msgstr ""

#: ../../doc/introduction.rst:28
msgid "Supports the peewee library"
msgstr ""

#: ../../doc/introduction.rst:29
msgid "s3"
msgstr ""

#: ../../doc/introduction.rst:29
msgid "Supports file admin using AWS S3"
msgstr ""

#: ../../doc/introduction.rst:30
msgid "azure-blob-storage"
msgstr ""

#: ../../doc/introduction.rst:30
msgid "Supports file admin using Azure blob store"
msgstr ""

#: ../../doc/introduction.rst:31
msgid "images"
msgstr ""

#: ../../doc/introduction.rst:31
msgid "Allows working with image data"
msgstr ""

#: ../../doc/introduction.rst:32
msgid "export"
msgstr ""

#: ../../doc/introduction.rst:32
msgid "Supports downloading data in a variety of formats (eg TSV, JSON, etc)"
msgstr ""

#: ../../doc/introduction.rst:33
msgid "rediscli"
msgstr ""

#: ../../doc/introduction.rst:33
msgid "Allows Flask-Admin to display a CLI for Redis"
msgstr ""

#: ../../doc/introduction.rst:34
msgid "translation"
msgstr ""

#: ../../doc/introduction.rst:34
msgid "Supports translating Flask-Admin into a number of languages"
msgstr ""

#: ../../doc/introduction.rst:35
msgid "all"
msgstr ""

#: ../../doc/introduction.rst:35
msgid "Installs support for all features"
msgstr ""

#: ../../doc/introduction.rst:38
msgid ""
"Once you've chosen the extras you need, install Flask-Admin by specifying"
" them like so::"
msgstr ""

#: ../../doc/introduction.rst:43
msgid "Initialization"
msgstr ""

#: ../../doc/introduction.rst:45
msgid ""
"The first step is to initialize an empty admin interface for your Flask "
"app::"
msgstr ""

#: ../../doc/introduction.rst:57
msgid ""
"Here, both the *name* and *theme* parameters are optional. Alternatively,"
" you could use the :meth:`~flask_admin.base.Admin.init_app` method."
msgstr ""

#: ../../doc/introduction.rst:60
msgid ""
"If you start this application and navigate to "
"`http://localhost:5000/admin/ <http://localhost:5000/admin/>`_, you "
"should see an empty page with a navigation bar on top. Customize the look"
" by specifying one of the included Bootswatch themes (see "
"https://bootswatch.com/4/ for a preview of the swatches)."
msgstr ""

#: ../../doc/introduction.rst:65
msgid "Adding Model Views"
msgstr ""

#: ../../doc/introduction.rst:67
msgid ""
"Model views allow you to add a dedicated set of admin pages for managing "
"any model in your database. Do this by creating instances of the "
"*ModelView* class, which you can import from one of Flask-Admin's built-"
"in ORM backends. An example is the SQLAlchemy backend, which you can use "
"as follows::"
msgstr ""

#: ../../doc/introduction.rst:79
msgid ""
"Straight out of the box, this gives you a set of fully featured *CRUD* "
"views for your model:"
msgstr ""

#: ../../doc/introduction.rst:81
msgid ""
"A `list` view, with support for searching, sorting, filtering, and "
"deleting records."
msgstr ""

#: ../../doc/introduction.rst:82
msgid "A `create` view for adding new records."
msgstr ""

#: ../../doc/introduction.rst:83
msgid "An `edit` view for updating existing records."
msgstr ""

#: ../../doc/introduction.rst:84
msgid "An optional, read-only `details` view."
msgstr ""

#: ../../doc/introduction.rst:86
msgid ""
"There are many options available for customizing the display and "
"functionality of these built-in views. For more details on that, see :ref"
":`customizing-builtin-views`. For more details on the other ORM backends "
"that are available, see :ref:`database-backends`."
msgstr ""

#: ../../doc/introduction.rst:91
msgid "Adding Content to the Index Page"
msgstr ""

#: ../../doc/introduction.rst:92
msgid ""
"The first thing you'll notice when you visit "
"`http://localhost:5000/admin/ <http://localhost:5000/admin/>`_ is that "
"it's just an empty page with a navigation menu. To add some content to "
"this page, save the following text as `admin/index.html` in your "
"project's `templates` directory::"
msgstr ""

#: ../../doc/introduction.rst:101
msgid ""
"This will override the default index template, but still give you the "
"built-in navigation menu. So, now you can add any content to the index "
"page, while maintaining a consistent user experience."
msgstr ""

#: ../../doc/introduction.rst:105
msgid "Authorization & Permissions"
msgstr ""

#: ../../doc/introduction.rst:107
msgid ""
"When setting up an admin interface for your application, one of the first"
" problems you'll want to solve is how to keep unwanted users out. With "
"Flask-Admin there are a few different ways of approaching this."
msgstr ""

#: ../../doc/introduction.rst:112
msgid "HTTP Basic Auth"
msgstr ""

#: ../../doc/introduction.rst:113
msgid ""
"Unfortunately, there is no easy way of applying HTTP Basic Auth just to "
"your admin interface."
msgstr ""

#: ../../doc/introduction.rst:116
msgid ""
"The simplest form of authentication is HTTP Basic Auth. It doesn't "
"interfere with your database models, and it doesn't require you to write "
"any new view logic or template code. So it's great for when you're "
"deploying something that's still under development, before you want the "
"whole world to see it."
msgstr ""

#: ../../doc/introduction.rst:121
msgid ""
"Have a look at `Flask-BasicAuth <https://flask-"
"basicauth.readthedocs.io/>`_ to see just how easy it is to put your whole"
" application behind HTTP Basic Auth."
msgstr ""

#: ../../doc/introduction.rst:125
msgid "Rolling Your Own"
msgstr ""

#: ../../doc/introduction.rst:126
msgid ""
"For a more flexible solution, Flask-Admin lets you define access control "
"rules on each of your admin view classes by simply overriding the "
"`is_accessible` method. How you implement the logic is up to you, but if "
"you were to use a low-level library like `Flask-Login <https://flask-"
"login.readthedocs.io/>`_, then restricting access could be as simple as::"
msgstr ""

#: ../../doc/introduction.rst:141
msgid ""
"In the navigation menu, components that are not accessible to a "
"particular user will not be displayed for that user. For an example of "
"using Flask-Login with Flask-Admin, have a look at https://github.com"
"/pallets-eco/flask-admin/tree/master/examples/auth-flask-login."
msgstr ""

#: ../../doc/introduction.rst:145
msgid ""
"The main drawback is that you still need to implement all of the relevant"
" login, registration, and account management views yourself."
msgstr ""

#: ../../doc/introduction.rst:150
msgid "Using Flask-Security"
msgstr ""

#: ../../doc/introduction.rst:152
msgid ""
"If you want a more polished solution, you could use `Flask-Security "
"<https://flask-security-too.readthedocs.io/>`_, which is a higher-level "
"library. It comes with lots of built-in views for doing common things "
"like user registration, login, email address confirmation, password "
"resets, etc."
msgstr ""

#: ../../doc/introduction.rst:157
msgid ""
"The only complicated bit is making the built-in Flask-Security views "
"integrate smoothly with the Flask-Admin templates to create a consistent "
"user experience. To do this, you will need to override the built-in "
"Flask-Security templates and have them extend the Flask-Admin base "
"template by adding the following to the top of each file::"
msgstr ""

#: ../../doc/introduction.rst:165
msgid ""
"Now, you'll need to manually pass in some context variables for the "
"Flask-Admin templates to render correctly when they're being called from "
"the Flask-Security views. Defining a `security_context_processor` "
"function will take care of this for you::"
msgstr ""

#: ../../doc/introduction.rst:176
msgid ""
"For a working example of using Flask-Security with Flask-Admin, have a "
"look at https://github.com/pallets-eco/flask-"
"admin/tree/master/examples/auth."
msgstr ""

#: ../../doc/introduction.rst:179
msgid ""
"The example only uses the built-in `register` and `login` views, but you "
"could follow the same approach for including the other views, like "
"`forgot_password`, `send_confirmation`, etc."
msgstr ""

#: ../../doc/introduction.rst:185
msgid "Customizing Built-in Views"
msgstr ""

#: ../../doc/introduction.rst:187
msgid ""
"When inheriting from `ModelView`, values can be specified for numerous "
"configuration parameters. Use these to customize the views to suit your "
"particular models::"
msgstr ""

#: ../../doc/introduction.rst:202
msgid ""
"Or, in much the same way, you can specify options for a single model at a"
" time::"
msgstr ""

#: ../../doc/introduction.rst:215
msgid "`ModelView` Configuration Attributes"
msgstr ""

#: ../../doc/introduction.rst:217
msgid ""
"For a complete list of the attributes that are defined, have a look at "
"the API documentation for :meth:`~flask_admin.model.BaseModelView`. Here "
"are some of the most commonly used attributes:"
msgstr ""

#: ../../doc/introduction.rst:221
msgid ""
"To **disable some of the CRUD operations**, set any of these boolean "
"parameters::"
msgstr ""

#: ../../doc/introduction.rst:227
msgid ""
"If your model has too much data to display in the list view, you can "
"**add a read-only details view** by setting::"
msgstr ""

#: ../../doc/introduction.rst:232
msgid ""
"**Removing columns** from the list view is easy, just pass a list of "
"column names for the *column_exclude_list* parameter::"
msgstr ""

#: ../../doc/introduction.rst:237
msgid ""
"To **make columns searchable**, or to use them for filtering, specify a "
"list of column names::"
msgstr ""

#: ../../doc/introduction.rst:242
msgid ""
"For a faster editing experience, enable **inline editing** in the list "
"view::"
msgstr ""

#: ../../doc/introduction.rst:246
msgid ""
"Or, have the add & edit forms display inside a **modal window** on the "
"list page, instead of the dedicated *create* & *edit* pages::"
msgstr ""

#: ../../doc/introduction.rst:252
msgid ""
"You can restrict the possible values for a text-field by specifying a "
"list of **select choices**::"
msgstr ""

#: ../../doc/introduction.rst:264
msgid "To **remove fields** from the create and edit forms::"
msgstr ""

#: ../../doc/introduction.rst:268
msgid "To specify **WTForms field arguments**::"
msgstr ""

#: ../../doc/introduction.rst:277
msgid ""
"Or, to specify arguments to the **WTForms widgets** used to render those "
"fields::"
msgstr ""

#: ../../doc/introduction.rst:286
msgid ""
"When your forms contain foreign keys, have those **related models loaded "
"via ajax**, using::"
msgstr ""

#: ../../doc/introduction.rst:295
msgid "To filter the results that are loaded via ajax, you can use::"
msgstr ""

#: ../../doc/introduction.rst:302
msgid "To **manage related models inline**::"
msgstr ""

#: ../../doc/introduction.rst:306
msgid ""
"These inline forms can be customized. Have a look at the API "
"documentation for "
":meth:`~flask_admin.contrib.sqla.ModelView.inline_models`."
msgstr ""

#: ../../doc/introduction.rst:309
msgid "To **enable csv export** of the model view::"
msgstr ""

#: ../../doc/introduction.rst:313
msgid ""
"This will add a button to the model view that exports records, truncating"
" at :attr:`~flask_admin.model.BaseModelView.export_max_rows`."
msgstr ""

#: ../../doc/introduction.rst:317
msgid "Grouping Views"
msgstr ""

#: ../../doc/introduction.rst:318
msgid ""
"When adding a view, specify a value for the `category` parameter to group"
" related views together in the menu::"
msgstr ""

#: ../../doc/introduction.rst:325
msgid ""
"This will create a top-level menu item named 'Team', and a drop-down "
"containing links to the three views."
msgstr ""

#: ../../doc/introduction.rst:328
msgid ""
"To nest related views within these drop-downs, use the `add_sub_category`"
" method::"
msgstr ""

#: ../../doc/introduction.rst:332
msgid "And to add arbitrary hyperlinks to the menu::"
msgstr ""

#: ../../doc/introduction.rst:338
msgid "Adding Your Own Views"
msgstr ""

#: ../../doc/introduction.rst:340
msgid ""
"For situations where your requirements are really specific and you "
"struggle to meet them with the built-in "
":class:`~flask_admin.model.ModelView` class, Flask-Admin makes it easy "
"for you to take full control and add your own views to the interface."
msgstr ""

#: ../../doc/introduction.rst:345
msgid "Standalone Views"
msgstr ""

#: ../../doc/introduction.rst:346
msgid ""
"A set of standalone views (not tied to any particular model) can be added"
" by extending the :class:`~flask_admin.base.BaseView` class and defining "
"your own view methods. For example, to add a page that displays some "
"analytics data from a 3rd-party API::"
msgstr ""

#: ../../doc/introduction.rst:359
msgid ""
"This will add a link to the navbar for your view. Notice that it is "
"served at '/', the root URL. This is a restriction on standalone views: "
"at the very minimum, each view class needs at least one method to serve a"
" view at its root."
msgstr ""

#: ../../doc/introduction.rst:363
msgid ""
"The `analytics_index.html` template for the example above, could look "
"something like::"
msgstr ""

#: ../../doc/introduction.rst:370
msgid ""
"By extending the *admin/master.html* template, you can maintain a "
"consistent user experience, even while having tight control over your "
"page's content."
msgstr ""

#: ../../doc/introduction.rst:374
msgid "Overriding the Built-in Views"
msgstr ""

#: ../../doc/introduction.rst:375
msgid ""
"There may be some scenarios where you want most of the built-in ModelView"
" functionality, but you want to replace one of the default `create`, "
"`edit`, or `list` views. For this you could override only the view in "
"question, and all the links to it will still function as you would "
"expect::"
msgstr ""

#: ../../doc/introduction.rst:393
msgid "Working With the Built-in Templates"
msgstr ""

#: ../../doc/introduction.rst:395
msgid ""
"Flask-Admin uses the `Jinja2 <https://jinja.palletsprojects.com/>`_ "
"templating engine."
msgstr ""

#: ../../doc/introduction.rst:400
msgid "Extending the Built-in Templates"
msgstr ""

#: ../../doc/introduction.rst:402
msgid ""
"Rather than overriding the built-in templates completely, it's best to "
"extend them. This will make it simpler for you to upgrade to new Flask-"
"Admin versions in future."
msgstr ""

#: ../../doc/introduction.rst:405
msgid ""
"Internally, the Flask-Admin templates are derived from the "
"`admin/master.html` template. The three most interesting templates for "
"you to extend are probably:"
msgstr ""

#: ../../doc/introduction.rst:408
msgid "`admin/model/list.html`"
msgstr ""

#: ../../doc/introduction.rst:409
msgid "`admin/model/create.html`"
msgstr ""

#: ../../doc/introduction.rst:410
msgid "`admin/model/edit.html`"
msgstr ""

#: ../../doc/introduction.rst:412
msgid ""
"To extend the default *edit* template with your own functionality, create"
" a template in `templates/microblog_edit.html` to look something like::"
msgstr ""

#: ../../doc/introduction.rst:422
msgid ""
"Now, to make your view classes use this template, set the appropriate "
"class property::"
msgstr ""

#: ../../doc/introduction.rst:433
msgid ""
"If you want to use your own base template, then pass the name of the "
"template to the admin theme during initialization::"
msgstr ""

#: ../../doc/introduction.rst:439
msgid "Overriding the Built-in Templates"
msgstr ""

#: ../../doc/introduction.rst:441
msgid ""
"To take full control over the style and layout of the admin interface, "
"you can override all of the built-in templates. Just keep in mind that "
"the templates will change slightly from one version of Flask-Admin to the"
" next, so once you start overriding them, you need to take care when "
"upgrading your package version."
msgstr ""

#: ../../doc/introduction.rst:446
msgid ""
"To override any of the built-in templates, simply copy them from the "
"Flask-Admin source into your project's `templates/admin/` directory. As "
"long as the filenames stay the same, the templates in your project "
"directory should automatically take precedence over the built-in ones."
msgstr ""

#: ../../doc/introduction.rst:452
msgid "Available Template Blocks"
msgstr ""

#: ../../doc/introduction.rst:454
msgid ""
"Flask-Admin defines one *base* template at `admin/master.html` that all "
"other admin templates are derived from. This template is a proxy which "
"points to `admin/base.html`, which defines the following blocks:"
msgstr ""

#: ../../doc/introduction.rst:459 ../../doc/introduction.rst:479
msgid "Block Name"
msgstr ""

#: ../../doc/introduction.rst:459 ../../doc/introduction.rst:479
#: ../../doc/introduction.rst:500
msgid "Description"
msgstr ""

#: ../../doc/introduction.rst:461
msgid "head_meta"
msgstr ""

#: ../../doc/introduction.rst:461
msgid "Page metadata in the header"
msgstr ""

#: ../../doc/introduction.rst:462
msgid "title"
msgstr ""

#: ../../doc/introduction.rst:462
msgid "Page title"
msgstr ""

#: ../../doc/introduction.rst:463
msgid "head_css"
msgstr ""

#: ../../doc/introduction.rst:463
msgid "Various CSS includes in the header"
msgstr ""

#: ../../doc/introduction.rst:464
msgid "head"
msgstr ""

#: ../../doc/introduction.rst:464
msgid "Empty block in HTML head, in case you want to put something  there"
msgstr ""

#: ../../doc/introduction.rst:465
msgid "page_body"
msgstr ""

#: ../../doc/introduction.rst:465
msgid "Page layout"
msgstr ""

#: ../../doc/introduction.rst:466
msgid "brand"
msgstr ""

#: ../../doc/introduction.rst:466
msgid "Logo in the menu bar"
msgstr ""

#: ../../doc/introduction.rst:467
msgid "main_menu"
msgstr ""

#: ../../doc/introduction.rst:467
msgid "Main menu"
msgstr ""

#: ../../doc/introduction.rst:468
msgid "menu_links"
msgstr ""

#: ../../doc/introduction.rst:468
msgid "Links menu"
msgstr ""

#: ../../doc/introduction.rst:469
msgid "access_control"
msgstr ""

#: ../../doc/introduction.rst:469
msgid "Section to the right of the menu (can be used to add login/logout buttons)"
msgstr ""

#: ../../doc/introduction.rst:470
msgid "messages"
msgstr ""

#: ../../doc/introduction.rst:470
msgid "Alerts and various messages"
msgstr ""

#: ../../doc/introduction.rst:471
msgid "body"
msgstr ""

#: ../../doc/introduction.rst:471
msgid "Content (that's where your view will be displayed)"
msgstr ""

#: ../../doc/introduction.rst:472
msgid "tail"
msgstr ""

#: ../../doc/introduction.rst:472
msgid "Empty area below content"
msgstr ""

#: ../../doc/introduction.rst:475
msgid ""
"In addition to all of the blocks that are inherited from "
"`admin/master.html`, the `admin/model/list.html` template also contains "
"the following blocks:"
msgstr ""

#: ../../doc/introduction.rst:481
msgid "model_menu_bar"
msgstr ""

#: ../../doc/introduction.rst:481
msgid "Menu bar"
msgstr ""

#: ../../doc/introduction.rst:482
msgid "model_list_table"
msgstr ""

#: ../../doc/introduction.rst:482
msgid "Table container"
msgstr ""

#: ../../doc/introduction.rst:483
msgid "list_header"
msgstr ""

#: ../../doc/introduction.rst:483
msgid "Table header row"
msgstr ""

#: ../../doc/introduction.rst:484
msgid "list_row_actions_header"
msgstr ""

#: ../../doc/introduction.rst:484
msgid "Actions header"
msgstr ""

#: ../../doc/introduction.rst:485
msgid "list_row"
msgstr ""

#: ../../doc/introduction.rst:485
msgid "Single row"
msgstr ""

#: ../../doc/introduction.rst:486
msgid "list_row_actions"
msgstr ""

#: ../../doc/introduction.rst:486
msgid "Row action cell with edit/remove/etc buttons"
msgstr ""

#: ../../doc/introduction.rst:487
msgid "empty_list_message"
msgstr ""

#: ../../doc/introduction.rst:487
msgid "Message that will be displayed if there are no models found"
msgstr ""

#: ../../doc/introduction.rst:490
msgid ""
"Have a look at the `layout` example at https://github.com/pallets-eco"
"/flask-admin/tree/master/examples/custom-layout to see how you can take "
"full stylistic control over the admin interface."
msgstr ""

#: ../../doc/introduction.rst:494
msgid "Template Context Variables"
msgstr ""

#: ../../doc/introduction.rst:496
msgid ""
"While working in any of the templates that extend `admin/master.html`, "
"you have access to a small number of context variables:"
msgstr ""

#: ../../doc/introduction.rst:500
msgid "Variable Name"
msgstr ""

#: ../../doc/introduction.rst:502
msgid "admin_view"
msgstr ""

#: ../../doc/introduction.rst:502
msgid "Current administrative view"
msgstr ""

#: ../../doc/introduction.rst:503
msgid "admin_base_template"
msgstr ""

#: ../../doc/introduction.rst:503
msgid "Base template name"
msgstr ""

#: ../../doc/introduction.rst:504
msgid "theme"
msgstr ""

#: ../../doc/introduction.rst:504
msgid "The Theme configuration passed into Flask-Admin at instantiation"
msgstr ""

#: ../../doc/introduction.rst:505
msgid "_gettext"
msgstr ""

#: ../../doc/introduction.rst:505
msgid "Babel gettext"
msgstr ""

#: ../../doc/introduction.rst:506
msgid "_ngettext"
msgstr ""

#: ../../doc/introduction.rst:506
msgid "Babel ngettext"
msgstr ""

#: ../../doc/introduction.rst:507
msgid "h"
msgstr ""

#: ../../doc/introduction.rst:507
msgid "Helpers from :mod:`~flask_admin.helpers` module"
msgstr ""

#: ../../doc/introduction.rst:511
msgid "Generating URLs"
msgstr ""

#: ../../doc/introduction.rst:513
msgid "To generate the URL for a specific view, use *url_for* with a dot prefix::"
msgstr ""

#: ../../doc/introduction.rst:524
msgid "A specific record can also be referenced with::"
msgstr ""

#: ../../doc/introduction.rst:529
msgid ""
"When referencing ModelView instances, use the lowercase name of the model"
" as the prefix when calling *url_for*. Other views can be referenced by "
"specifying a unique endpoint for each, and using that as the prefix. So, "
"you could use::"
msgstr ""

#: ../../doc/introduction.rst:535
msgid "If your view endpoint was defined like::"
msgstr ""


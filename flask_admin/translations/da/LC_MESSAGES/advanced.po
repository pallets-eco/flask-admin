# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2024, Flask-Admin Team
# This file is distributed under the same license as the flask-admin
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: flask-admin 2.0.0a0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-22 16:17+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: da\n"
"Language-Team: da <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../doc/advanced.rst:4
msgid "Advanced Functionality"
msgstr ""

#: ../../doc/advanced.rst:7
msgid "Enabling CSRF Protection"
msgstr ""

#: ../../doc/advanced.rst:9
msgid ""
"To add CSRF protection to the forms that are generated by *ModelView* "
"instances, use the SecureForm class in your *ModelView* subclass by "
"specifying the *form_base_class* parameter::"
msgstr ""

#: ../../doc/advanced.rst:18
msgid ""
"SecureForm requires WTForms 2 or greater. It uses the WTForms SessionCSRF"
" class to generate and validate the tokens for you when the forms are "
"submitted."
msgstr ""

#: ../../doc/advanced.rst:22
msgid "CSP support"
msgstr ""

#: ../../doc/advanced.rst:24
msgid ""
"To support `CSP "
"<https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html>`_"
" in Flask-Admin, you can pass a `csp_nonce_generator` function through to"
" Flask-Admin on initialisation. This function should return a CSP nonce "
"that will be attached to all `<script>` and `<style>` resources. You are "
"responsible for making sure that your Flask responses include an "
"appropriate 'Content-Security-Policy` header that also includes the same "
"nonce value."
msgstr ""

#: ../../doc/advanced.rst:31
msgid ""
"We recommend using `Flask-Talisman <https://pypi.org/project/flask-"
"talisman/>`_. Here's an example of how to configure Flask-Admin to inject"
" CSP nonce values::"
msgstr ""

#: ../../doc/advanced.rst:47
msgid ""
"If you decide to use a content security policy, you should pay close "
"attention to the policy you set to make sure it is appropriate for your "
"project's security needs."
msgstr ""

#: ../../doc/advanced.rst:50
msgid ""
"If you create any of your own templates for Flask-Admin pages, you will "
"need to inject the CSP nonces yourself as appropriate."
msgstr ""

#: ../../doc/advanced.rst:53
msgid "Adding Custom Javascript and CSS"
msgstr ""

#: ../../doc/advanced.rst:55
msgid ""
"To add custom JavaScript or CSS in your *ModelView* use *extra_js* or "
"*extra_css* parameters::"
msgstr ""

#: ../../doc/advanced.rst:62
msgid "Localization With Flask-Babel"
msgstr ""

#: ../../doc/advanced.rst:64
msgid ""
"Flask-Admin comes with translations for several languages. Enabling "
"localization is simple:"
msgstr ""

#: ../../doc/advanced.rst:67
msgid ""
"Install `Flask-Babel <https://github.com/python-babel/flask-babel/>`_ to "
"do the heavy lifting."
msgstr ""

#: ../../doc/advanced.rst:70
msgid "pip install flask-babel"
msgstr ""

#: ../../doc/advanced.rst:72
msgid "Create a locale selector function::"
msgstr ""

#: ../../doc/advanced.rst:79
msgid "Initialize Flask-Babel by creating instance of `Babel` class::"
msgstr ""

#: ../../doc/advanced.rst:87
msgid ""
"Now, you could try a French version of the application at: "
"`http://localhost:5000/admin/?lang=fr "
"<http://localhost:5000/admin/?lang=fr>`_."
msgstr ""

#: ../../doc/advanced.rst:89
msgid ""
"Go ahead and add your own logic to the locale selector function. The "
"application can store locale in a user profile, cookie, session, etc. It "
"can also use the `Accept-Language` header to make the selection "
"automatically."
msgstr ""

#: ../../doc/advanced.rst:93
msgid ""
"If the built-in translations are not enough, look at the `Flask-Babel "
"documentation <https://python-babel.github.io/flask-babel/>`_ to see how "
"you can add your own."
msgstr ""

#: ../../doc/advanced.rst:97
msgid "Using with Flask in `host_matching` mode"
msgstr ""

#: ../../doc/advanced.rst:99
msgid ""
"If Flask is configured with `host_matching` enabled, then all routes "
"registered on the app need to know which host(s) they should be served "
"for."
msgstr ""

#: ../../doc/advanced.rst:101
msgid ""
"This requires some additional explicit configuration for Flask-Admin by "
"passing the `host` argument to `Admin()` calls."
msgstr ""

#: ../../doc/advanced.rst:103
msgid "With your Flask app initialised::"
msgstr ""

#: ../../doc/advanced.rst:110
msgid "Serving Flask-Admin on a single, explicit host"
msgstr ""

#: ../../doc/advanced.rst:111
msgid ""
"Construct your Admin instance(s) and pass the desired `host` for the "
"admin instance::"
msgstr ""

#: ../../doc/advanced.rst:121
msgid ""
"Flask's `url_for` calls will work without any additional "
"configuration/information::"
msgstr ""

#: ../../doc/advanced.rst:127
msgid "Serving Flask-Admin on all hosts"
msgstr ""

#: ../../doc/advanced.rst:128
msgid ""
"Pass a wildcard to the `host` parameter to serve the admin instance on "
"all hosts::"
msgstr ""

#: ../../doc/advanced.rst:138
msgid ""
"If you need to generate URLs for a wildcard admin instance, you will need"
" to pass `admin_routes_host` to the `url_for` call::"
msgstr ""

#: ../../doc/advanced.rst:146
msgid "Managing Files & Folders"
msgstr ""

#: ../../doc/advanced.rst:148
msgid ""
"To manage static files instead of database records, Flask-Admin comes "
"with the FileAdmin plug-in. It gives you the ability to upload, delete, "
"rename, etc. You can use it by adding a FileAdmin view to your app::"
msgstr ""

#: ../../doc/advanced.rst:164
msgid ""
"FileAdmin also has out-of-the-box support for managing files located on a"
" Amazon Simple Storage Service bucket. To add it to your app::"
msgstr ""

#: ../../doc/advanced.rst:174
msgid ""
"You can disable uploads, disable file deletion, restrict file uploads to "
"certain types, etc. Check :mod:`flask_admin.contrib.fileadmin` in the API"
" documentation for more details."
msgstr ""

#: ../../doc/advanced.rst:178
msgid "Adding new file backends"
msgstr ""

#: ../../doc/advanced.rst:180
msgid ""
"You can also implement your own storage backend by creating a class that "
"implements the same methods defined in the `LocalFileStorage` class. "
"Check :mod:`flask_admin.contrib.fileadmin` in the API documentation for "
"details on the methods."
msgstr ""

#: ../../doc/advanced.rst:185
msgid "Adding A Redis Console"
msgstr ""

#: ../../doc/advanced.rst:187
msgid ""
"Another plug-in that's available is the Redis Console. If you have a "
"Redis instance running on the same machine as your app, you can::"
msgstr ""

#: ../../doc/advanced.rst:201
msgid "Replacing Individual Form Fields"
msgstr ""

#: ../../doc/advanced.rst:203
msgid ""
"The `form_overrides` attribute allows you to replace individual fields "
"within a form. A common use-case for this would be to add a *What-You-"
"See-Is-What-You-Get* (WYSIWIG) editor, or to handle file / image uploads "
"that need to be tied to a field in your model."
msgstr ""

#: ../../doc/advanced.rst:208
msgid "WYSIWIG Text Fields"
msgstr ""

#: ../../doc/advanced.rst:209
msgid ""
"To handle complicated text content, you can use `CKEditor "
"<https://ckeditor.com/>`_ by subclassing some of the built-in WTForms "
"classes as follows::"
msgstr ""

#: ../../doc/advanced.rst:235
msgid "File & Image Fields"
msgstr ""

#: ../../doc/advanced.rst:237
msgid ""
"Flask-Admin comes with a built-in "
":meth:`~flask_admin.form.upload.FileUploadField` and "
":meth:`~flask_admin.form.upload.ImageUploadField`. To make use of them, "
"you'll need to specify an upload directory and add them to the forms in "
"question. Image handling also requires you to have `Pillow "
"<https://pypi.python.org/pypi/Pillow/2.8.2>`_ installed if you need to do"
" any processing on the image files."
msgstr ""

#: ../../doc/advanced.rst:243
msgid ""
"Have a look at the example at https://github.com/pallets-eco/flask-"
"admin/tree/master/examples/forms-files-images."
msgstr ""

#: ../../doc/advanced.rst:246
msgid ""
"If you just want to manage static files in a directory, without tying "
"them to a database model, then use the :ref:`File-Admin<file-admin>` "
"plug-in."
msgstr ""

#: ../../doc/advanced.rst:250
msgid "Managing Geographical Models"
msgstr ""

#: ../../doc/advanced.rst:252
msgid ""
"If you want to store spatial information in a GIS database, Flask-Admin "
"has you covered. The GeoAlchemy backend extends the SQLAlchemy backend "
"(just as `GeoAlchemy <https://geoalchemy-2.readthedocs.io/>`_  extends "
"SQLAlchemy) to give you a pretty and functional map-based editor for your"
" admin pages."
msgstr ""

#: ../../doc/advanced.rst:257
msgid "Some notable features include:"
msgstr ""

#: ../../doc/advanced.rst:259
msgid ""
"Maps are displayed using the amazing `Leaflet <https://leafletjs.com/>`_ "
"Javascript library, with map data from `Mapbox "
"<https://www.mapbox.com>`_."
msgstr ""

#: ../../doc/advanced.rst:261
msgid ""
"Geographic information, including points, lines and polygons, can be "
"edited interactively using `Leaflet.Draw "
"<https://github.com/Leaflet/Leaflet.draw>`_."
msgstr ""

#: ../../doc/advanced.rst:263
msgid ""
"Graceful fallback: `GeoJSON <https://geojson.org/>`_ data can be edited "
"in a ``<textarea>``, if the user has turned off Javascript."
msgstr ""

#: ../../doc/advanced.rst:265
msgid ""
"Works with a `Geometry "
"<https://geoalchemy-2.readthedocs.io/en/latest/types.html#geoalchemy2.types.Geometry>`_"
" SQL field that is integrated with `Shapely "
"<https://shapely.readthedocs.io/>`_ objects."
msgstr ""

#: ../../doc/advanced.rst:267
msgid ""
"To get started, define some fields on your model using GeoAlchemy's "
"*Geometry* field. Next, add model views to your interface using the "
"ModelView class from the GeoAlchemy backend, rather than the usual "
"SQLAlchemy backend::"
msgstr ""

#: ../../doc/advanced.rst:283
msgid ""
"Some of the Geometry field types that are available include: \"POINT\", "
"\"MULTIPOINT\", \"POLYGON\", \"MULTIPOLYGON\", \"LINESTRING\" and "
"\"MULTILINESTRING\"."
msgstr ""

#: ../../doc/advanced.rst:286
msgid ""
"Have a look at https://github.com/pallets-eco/flask-"
"admin/tree/master/examples/geo_alchemy to get started."
msgstr ""

#: ../../doc/advanced.rst:290
msgid "Display map widgets"
msgstr ""

#: ../../doc/advanced.rst:292
msgid ""
"Flask-Admin uses `Leaflet <https://leafletjs.com/>`_ to display map "
"widgets for geographical data. By default, this uses `MapBox "
"<https://www.mapbox.com>`_."
msgstr ""

#: ../../doc/advanced.rst:295
msgid ""
"To have MapBox data display correctly, you'll have to sign up for an "
"account and include some credentials in your application's config::"
msgstr ""

#: ../../doc/advanced.rst:309
msgid ""
"If you want to use a map provider other than MapBox (eg OpenStreetMaps), "
"you can override the tile layer URLs and tile attribution attributes::"
msgstr ""

#: ../../doc/advanced.rst:316
msgid ""
"If you want to include a search box on map widgets for looking up "
"locations, you need the following additional configuration::"
msgstr ""

#: ../../doc/advanced.rst:321
msgid "Flask-Admin currently only supports Google Maps for map search."
msgstr ""

#: ../../doc/advanced.rst:324
msgid "Limitations"
msgstr ""

#: ../../doc/advanced.rst:326
msgid ""
"There's currently no way to sort, filter, or search on geometric fields "
"in the admin. It's not clear that there's a good way to do so. If you "
"have any ideas or suggestions, make a pull request!"
msgstr ""

#: ../../doc/advanced.rst:331
msgid "Customising Builtin Forms Via Rendering Rules"
msgstr ""

#: ../../doc/advanced.rst:333
msgid ""
"Before version 1.0.7, all model backends were rendering the *create* and "
"*edit* forms using a special Jinja2 macro, which was looping over the "
"fields of a WTForms form object and displaying them one by one. This "
"works well, but it is difficult to customize."
msgstr ""

#: ../../doc/advanced.rst:337
msgid ""
"Starting from version 1.0.7, Flask-Admin supports form rendering rules, "
"to give you fine grained control of how the forms for your modules should"
" be displayed."
msgstr ""

#: ../../doc/advanced.rst:340
msgid ""
"The basic idea is pretty simple: the customizable rendering rules replace"
" a static macro, so you can tell Flask-Admin how each form should be "
"rendered. As an extension, however, the rendering rules also let you do a"
" bit more: You can use them to output HTML, call Jinja2 macros, render "
"fields, and so on."
msgstr ""

#: ../../doc/advanced.rst:344
msgid ""
"Essentially, form rendering rules separate the form rendering from the "
"form definition. For example, it no longer matters in which sequence your"
" form fields are defined."
msgstr ""

#: ../../doc/advanced.rst:347
msgid ""
"To start using the form rendering rules, put a list of form field names "
"into the `form_create_rules` property one of your admin views::"
msgstr ""

#: ../../doc/advanced.rst:353
msgid ""
"In this example, only three fields will be rendered and `email` field "
"will be above other two fields."
msgstr ""

#: ../../doc/advanced.rst:355
msgid ""
"Whenever Flask-Admin sees a string value in `form_create_rules`, it "
"automatically assumes that it is a form field reference and creates a "
":class:`flask_admin.form.rules.Field` class instance for that field."
msgstr ""

#: ../../doc/advanced.rst:358
msgid ""
"Let's say we want to display some text between the `email` and "
"`first_name` fields. This can be accomplished by using the "
":class:`flask_admin.form.rules.Text` class::"
msgstr ""

#: ../../doc/advanced.rst:367
msgid "Built-in Rules"
msgstr ""

#: ../../doc/advanced.rst:369
msgid ""
"Flask-Admin comes with few built-in rules that can be found in the "
":mod:`flask_admin.form.rules` module:"
msgstr ""

#: ../../doc/advanced.rst:372
msgid "Form Rendering Rule"
msgstr ""

#: ../../doc/advanced.rst:372
msgid "Description"
msgstr ""

#: ../../doc/advanced.rst:374
msgid ":class:`flask_admin.form.rules.BaseRule`"
msgstr ""

#: ../../doc/advanced.rst:374
msgid "All rules derive from this class"
msgstr ""

#: ../../doc/advanced.rst:375
msgid ":class:`flask_admin.form.rules.NestedRule`"
msgstr ""

#: ../../doc/advanced.rst:375
msgid "Allows rule nesting, useful for HTML containers"
msgstr ""

#: ../../doc/advanced.rst:376
msgid ":class:`flask_admin.form.rules.Text`"
msgstr ""

#: ../../doc/advanced.rst:376
msgid "Simple text rendering rule"
msgstr ""

#: ../../doc/advanced.rst:377
msgid ":class:`flask_admin.form.rules.HTML`"
msgstr ""

#: ../../doc/advanced.rst:377
msgid "Same as `Text` rule, but does not escape the text"
msgstr ""

#: ../../doc/advanced.rst:378
msgid ":class:`flask_admin.form.rules.Macro`"
msgstr ""

#: ../../doc/advanced.rst:378
msgid "Calls macro from current Jinja2 context"
msgstr ""

#: ../../doc/advanced.rst:379
msgid ":class:`flask_admin.form.rules.Container`"
msgstr ""

#: ../../doc/advanced.rst:379
msgid "Wraps child rules into container rendered by macro"
msgstr ""

#: ../../doc/advanced.rst:380
msgid ":class:`flask_admin.form.rules.Field`"
msgstr ""

#: ../../doc/advanced.rst:380
msgid "Renders single form field"
msgstr ""

#: ../../doc/advanced.rst:381
msgid ":class:`flask_admin.form.rules.Header`"
msgstr ""

#: ../../doc/advanced.rst:381
msgid "Renders form header"
msgstr ""

#: ../../doc/advanced.rst:382
msgid ":class:`flask_admin.form.rules.FieldSet`"
msgstr ""

#: ../../doc/advanced.rst:382
msgid "Renders form header and child rules"
msgstr ""

#: ../../doc/advanced.rst:388
msgid "Using Different Database Backends"
msgstr ""

#: ../../doc/advanced.rst:390
msgid ""
"Other than SQLAlchemy... There are five different backends for you to "
"choose from, depending on which database you would like to use for your "
"application. If, however, you need to implement your own database "
"backend, have a look at :ref:`adding-model-backend`."
msgstr ""

#: ../../doc/advanced.rst:394
msgid ""
"If you don't know where to start, but you're familiar with relational "
"databases, then you should probably look at using `SQLAlchemy`_. It is a "
"full-featured toolkit, with support for SQLite, PostgreSQL, MySQL, Oracle"
" and MS-SQL amongst others. It really comes into its own once you have "
"lots of data, and a fair amount of relations between your data models. If"
" you want to track spatial data like latitude/longitude points, you "
"should look into `GeoAlchemy`_, as well."
msgstr ""

#: ../../doc/advanced.rst:401
msgid "SQLAlchemy"
msgstr ""

#: ../../doc/advanced.rst:403
msgid "Notable features:"
msgstr ""

#: ../../doc/advanced.rst:405
msgid "SQLAlchemy 0.6+ support"
msgstr ""

#: ../../doc/advanced.rst:406
msgid "Paging, sorting, filters"
msgstr ""

#: ../../doc/advanced.rst:407
msgid "Proper model relationship handling"
msgstr ""

#: ../../doc/advanced.rst:408
msgid "Inline editing of related models"
msgstr ""

#: ../../doc/advanced.rst:410
msgid "**Multiple Primary Keys**"
msgstr ""

#: ../../doc/advanced.rst:412
msgid ""
"Flask-Admin has limited support for models with multiple primary keys. It"
" only covers specific case when all but one primary keys are foreign keys"
" to another model. For example, model inheritance following this "
"convention."
msgstr ""

#: ../../doc/advanced.rst:416
msgid "Let's Model a car with its tyres::"
msgstr ""

#: ../../doc/advanced.rst:433
msgid ""
"A specific tyre is identified by using the two primary key columns of the"
" ``Tyre`` class, of which the ``car_id`` key is itself a foreign key to "
"the class ``Car``."
msgstr ""

#: ../../doc/advanced.rst:436
msgid ""
"To be able to CRUD the ``Tyre`` class, you need to enumerate columns when"
" defining the AdminView::"
msgstr ""

#: ../../doc/advanced.rst:441
msgid ""
"The ``form_columns`` needs to be explicit, as per default only one "
"primary key is displayed."
msgstr ""

#: ../../doc/advanced.rst:443
msgid ""
"When having multiple primary keys, **no** validation for uniqueness "
"*prior* to saving of the object will be done. Saving a model that "
"violates a unique-constraint leads to an Sqlalchemy-Integrity-Error. In "
"this case, ``Flask-Admin`` displays a proper error message and you can "
"change the data in the form. When the application has been started with "
"``debug=True`` the ``werkzeug`` debugger will catch the exception and "
"will display the stacktrace."
msgstr ""

#: ../../doc/advanced.rst:449
msgid "Peewee"
msgstr ""

#: ../../doc/advanced.rst:451
msgid "Features:"
msgstr ""

#: ../../doc/advanced.rst:453
msgid "Peewee 2.x+ support;"
msgstr ""

#: ../../doc/advanced.rst:454
msgid "Paging, sorting, filters, etc;"
msgstr ""

#: ../../doc/advanced.rst:455
msgid "Inline editing of related models;"
msgstr ""

#: ../../doc/advanced.rst:457
msgid ""
"In order to use peewee integration, you need to install two additional "
"Python packages: `peewee <https://docs.peewee-orm.com/>`_ and `wtf-peewee"
" <https://github.com/coleifer/wtf-peewee/>`_."
msgstr ""

#: ../../doc/advanced.rst:460
msgid "Known issues:"
msgstr ""

#: ../../doc/advanced.rst:462
msgid ""
"Many-to-Many model relations are not supported: there's no built-in way "
"to express M2M relation in Peewee"
msgstr ""

#: ../../doc/advanced.rst:464
msgid ""
"For more, check the :class:`~flask_admin.contrib.peewee` API "
"documentation. Or look at the Peewee example at https://github.com"
"/pallets-eco/flask-admin/tree/master/examples/peewee."
msgstr ""

#: ../../doc/advanced.rst:468
msgid "PyMongo"
msgstr ""

#: ../../doc/advanced.rst:470
msgid "The bare minimum you have to provide for Flask-Admin to work with PyMongo:"
msgstr ""

#: ../../doc/advanced.rst:472
msgid "A list of columns by setting `column_list` property"
msgstr ""

#: ../../doc/advanced.rst:473
msgid "Provide form to use by setting `form` property"
msgstr ""

#: ../../doc/advanced.rst:474
msgid ""
"When instantiating :class:`flask_admin.contrib.pymongo.ModelView` class, "
"you have to provide PyMongo collection object"
msgstr ""

#: ../../doc/advanced.rst:476
msgid "This is minimal PyMongo view::"
msgstr ""

#: ../../doc/advanced.rst:492
msgid "On top of that you can add sortable columns, filters, text search, etc."
msgstr ""

#: ../../doc/advanced.rst:494
msgid ""
"For more, check the :class:`~flask_admin.contrib.pymongo` API "
"documentation. Or look at the pymongo example at https://github.com"
"/pallets-eco/flask-admin/tree/master/examples/pymongo."
msgstr ""

#: ../../doc/advanced.rst:498
msgid "Migrating From Django"
msgstr ""

#: ../../doc/advanced.rst:500
msgid ""
"If you are used to `Django <https://www.djangoproject.com/>`_ and the "
"*django-admin* package, you will find Flask-Admin to work slightly "
"different from what you would expect."
msgstr ""

#: ../../doc/advanced.rst:504
msgid "Design Philosophy"
msgstr ""

#: ../../doc/advanced.rst:506
msgid ""
"In general, Django and *django-admin* strives to make life easier by "
"implementing sensible defaults. So a developer will be able to get an "
"application up in no time, but it will have to conform to most of the "
"defaults. Of course it is possible to customize things, but this often "
"requires a good understanding of what's going on behind the scenes, and "
"it can be rather tricky and time-consuming."
msgstr ""

#: ../../doc/advanced.rst:511
msgid ""
"The design philosophy behind Flask is slightly different. It embraces the"
" diversity that one tends to find in web applications by not forcing "
"design decisions onto the developer. Rather than making it very easy to "
"build an application that *almost* solves your whole problem, and then "
"letting you figure out the last bit, Flask aims to make it possible for "
"you to build the *whole* application. It might take a little more effort "
"to get started, but once you've got the hang of it, the sky is the "
"limit... Even when your application is a little different from most other"
" applications out there on the web."
msgstr ""

#: ../../doc/advanced.rst:518
msgid ""
"Flask-Admin follows this same design philosophy. So even though it "
"provides you with several tools for getting up & running quickly, it will"
" be up to you, as a developer, to tell Flask-Admin what should be "
"displayed and how. Even though it is easy to get started with a simple "
"`CRUD <https://en.wikipedia.org/wiki/Create,_read,_update_and_delete>`_ "
"interface for each model in your application, Flask-Admin doesn't fix you"
" to this approach, and you are free to define other ways of interacting "
"with some, or all, of your models."
msgstr ""

#: ../../doc/advanced.rst:524
msgid ""
"Due to Flask-Admin supporting more than one ORM (SQLAlchemy, Peewee, raw "
"pymongo), the developer is even free to mix different model types into "
"one application by instantiating appropriate CRUD classes."
msgstr ""

#: ../../doc/advanced.rst:527
msgid ""
"Here is a list of some of the configuration properties that are made "
"available by Flask-Admin and the SQLAlchemy backend. You can also see "
"which *django-admin* properties they correspond to:"
msgstr ""

#: ../../doc/advanced.rst:531
msgid "Django"
msgstr ""

#: ../../doc/advanced.rst:531
msgid "Flask-Admin"
msgstr ""

#: ../../doc/advanced.rst:533
msgid "actions"
msgstr ""

#: ../../doc/advanced.rst:533
msgid ":attr:`~flask_admin.actions`"
msgstr ""

#: ../../doc/advanced.rst:534
msgid "exclude"
msgstr ""

#: ../../doc/advanced.rst:534
msgid ":attr:`~flask_admin.model.BaseModelView.form_excluded_columns`"
msgstr ""

#: ../../doc/advanced.rst:535
msgid "fields"
msgstr ""

#: ../../doc/advanced.rst:535
msgid ":attr:`~flask_admin.model.BaseModelView.form_columns`"
msgstr ""

#: ../../doc/advanced.rst:536
msgid "form"
msgstr ""

#: ../../doc/advanced.rst:536
msgid ":attr:`~flask_admin.model.BaseModelView.form`"
msgstr ""

#: ../../doc/advanced.rst:537
msgid "formfield_overrides"
msgstr ""

#: ../../doc/advanced.rst:537
msgid ":attr:`~flask_admin.model.BaseModelView.form_args`"
msgstr ""

#: ../../doc/advanced.rst:538
msgid "inlines"
msgstr ""

#: ../../doc/advanced.rst:538
msgid ":attr:`~flask_admin.contrib.sqla.ModelView.inline_models`"
msgstr ""

#: ../../doc/advanced.rst:539
msgid "list_display"
msgstr ""

#: ../../doc/advanced.rst:539
msgid ":attr:`~flask_admin.model.BaseModelView.column_list`"
msgstr ""

#: ../../doc/advanced.rst:540
msgid "list_filter"
msgstr ""

#: ../../doc/advanced.rst:540
msgid ":attr:`~flask_admin.contrib.sqla.ModelView.column_filters`"
msgstr ""

#: ../../doc/advanced.rst:541
msgid "list_per_page"
msgstr ""

#: ../../doc/advanced.rst:541
msgid ":attr:`~flask_admin.model.BaseModelView.page_size`"
msgstr ""

#: ../../doc/advanced.rst:542
msgid "search_fields"
msgstr ""

#: ../../doc/advanced.rst:542
msgid ":attr:`~flask_admin.model.BaseModelView.column_searchable_list`"
msgstr ""

#: ../../doc/advanced.rst:543
msgid "add_form_template"
msgstr ""

#: ../../doc/advanced.rst:543
msgid ":attr:`~flask_admin.model.BaseModelView.create_template`"
msgstr ""

#: ../../doc/advanced.rst:544
msgid "change_form_template"
msgstr ""

#: ../../doc/advanced.rst:544
msgid ":attr:`~flask_admin.model.BaseModelView.change_form_template`"
msgstr ""

#: ../../doc/advanced.rst:547
msgid ""
"You might want to check :class:`~flask_admin.model.BaseModelView` for "
"basic model configuration options (reused by all model backends) and "
"specific backend documentation, for example "
":class:`~flask_admin.contrib.sqla.ModelView`. There's much more than what"
" is displayed in this table."
msgstr ""

#: ../../doc/advanced.rst:553
msgid "Overriding the Form Scaffolding"
msgstr ""

#: ../../doc/advanced.rst:555
msgid ""
"If you don't want to the use the built-in Flask-Admin form scaffolding "
"logic, you are free to roll your own by simply overriding "
":meth:`~flask_admin.model.base.scaffold_form`. For example, if you use "
"`WTForms-Alchemy <https://github.com/kvesteri/wtforms-alchemy>`_, you "
"could put your form generation code into a `scaffold_form` method in your"
" `ModelView` class."
msgstr ""

#: ../../doc/advanced.rst:560
msgid ""
"For SQLAlchemy, if the `synonym_property` does not return a SQLAlchemy "
"field, then Flask-Admin won't be able to figure out what to do with it, "
"so it won't generate a form field. In this case, you would need to "
"manually contribute your own field::"
msgstr ""

#: ../../doc/advanced.rst:570
msgid "Customizing Batch Actions"
msgstr ""

#: ../../doc/advanced.rst:572
msgid ""
"If you want to add other batch actions to the list view, besides the "
"default delete action, then you can define a function that implements the"
" desired logic and wrap it with the `@action` decorator."
msgstr ""

#: ../../doc/advanced.rst:575
msgid ""
"The `action` decorator takes three parameters: `name`, `text` and "
"`confirmation`. While the wrapped function should accept only one "
"parameter - `ids`::"
msgstr ""

#: ../../doc/advanced.rst:603
msgid "Raise exceptions instead of flash error messages"
msgstr ""

#: ../../doc/advanced.rst:605
msgid ""
"By default, Flask-Admin will capture most exceptions related to "
"reading/writing models and display a flash message instead of raising an "
"exception. If your Flask app is running in debug mode (ie under local "
"development), exceptions will not be suppressed."
msgstr ""

#: ../../doc/advanced.rst:609
msgid ""
"The flash message behaviour can be overridden with some Flask "
"configuration.::"
msgstr ""

#: ../../doc/advanced.rst:617
msgid "FLASK_ADMIN_RAISE_ON_VIEW_EXCEPTION"
msgstr ""

#: ../../doc/advanced.rst:618
msgid ""
"Instead of turning exceptions on model create/update/delete actions into "
"flash messages, raise the exception as normal. You should expect the view"
" to return a 500 to the user, unless you add specific handling to prevent"
" this."
msgstr ""

#: ../../doc/advanced.rst:623
msgid "FLASK_ADMIN_RAISE_ON_INTEGRITY_ERROR"
msgstr ""

#: ../../doc/advanced.rst:624
msgid "This targets SQLAlchemy specifically."
msgstr ""

#: ../../doc/advanced.rst:626
msgid ""
"Unlike the previous setting, this will specifically only affect the "
"behaviour of IntegrityErrors. These usually come from violations on "
"constraints in the database, for example trying to insert a row with a "
"primary key that already exists."
msgstr ""

